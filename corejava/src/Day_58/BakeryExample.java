package Day_58;

public class BakeryExample {

	public static void main(String[] args) {
		Bakery b = new Bakery(0,0);
		Thread t1 = new Thread(new Baker(b));
	
		t1.start();
		
		Customer c1 = new Customer(b,"Raj");
		Customer c2 = new Customer(b,"Virat");
		Customer c3 = new Customer(b,"Suresh");
		
		Thread cust1 = new Thread(c1);
		Thread cust2 = new Thread(c2);
		Thread cust3 = new Thread(c3);
		
		cust1.start();
		cust2.start();
		cust3.start();
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(b.goodsProducedToday);
	}

}

/*
10 Goods Produced Sucessfully...
Raj buyed 10 successfully...
10 Goods Produced Sucessfully...
Raj is going to buy goods...
Raj buyed 10 successfully...
Raj is going to buy goods...
10 Goods Produced Sucessfully...
Raj buyed 10 successfully...
Raj is going to buy goods...
10 Goods Produced Sucessfully...
Raj buyed 10 successfully...
Raj is going to buy goods...
10 Goods Produced Sucessfully...
Raj buyed 10 successfully...
Raj is going to buy goods...
10 Goods Produced Sucessfully...
Raj buyed 10 successfully...
Raj is going to buy goods...
10 Goods Produced Sucessfully...
Raj buyed 10 successfully...
Raj is going to buy goods...
10 Goods Produced Sucessfully...
Raj buyed 10 successfully...
Raj is going to buy goods...
10 Goods Produced Sucessfully...
Raj buyed 10 successfully...
Raj is going to buy goods...
10 Goods Produced Sucessfully...
Maximum Limit Reached...
Raj buyed 10 successfully...
Raj is going to buy goods...
100

*/

/*
BakeryExample Class (Main Class)
==========================================
Create a main class BakeryExample to start the simulation. It should:

Instantiate the Bakery class.

Create and start one Baker thread by passing the Bakery instance to the Baker class.

Create and start multiple Customer threads by passing the Bakery instance to each Customer instance.

Ensure the main class waits for the baker to finish baking and all customer threads to finish buying goods before exiting.
*/